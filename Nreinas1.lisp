(defun eliminarColumnaDeFila (elemento lista)
    (if (null lista)
        nil
        (if (= (cadar lista) elemento )
            (cdr lista)
            (cons (car lista) (eliminarColumnaDeFila elemento (cdr lista)) )
        )
    )
)

(defun eliminarColumna (elemento tab)
    (if (null tab)
        nil
        (cons (eliminarColumnaDeFila elemento (car tab)) (eliminarColumna elemento (cdr tab)) )
    )
)

(defun eliminarFila (elemento tab)
    (if (null tab)
        nil
        (if (= (caaar tab) elemento )
            (cdr tab)
            (cons (car tab) (eliminarFila elemento (cdr tab)) )
        )
    )
)

(defun eliminarDiagSubFun (izq der tab)
    (if (null tab)
        nil
        (cons (eliminarColumnaDeFila izq (eliminarColumnaDeFila der (car tab)) ) 
               (eliminarDiagSubFun (- izq 1) (+ der 1) (cdr tab))
        )
    )
)

(defun eliminarDiag (elemento tab)
    (if (null tab)
        nil
        (if (= (caaar tab) (car elemento) )
            (eliminarDiagSubFun (cadr elemento) (cadr elemento) tab)
            (cons (car tab) (eliminarDiag elemento (cdr tab) ) )
        )
    )
)

(defun limpiarNils (lista)
    (if (null lista)
        nil
        (if (null (car lista))
            (limpiarNils (cdr lista))
            (cons (car lista) (limpiarNils (cdr lista)))
        )
    )
)

(defun elim (elemento tab)
    (if (null tab)
        nil
        (if (<= (caaar tab) (car elemento) )
            (limpiarNils (eliminarColumna (cadr elemento) (eliminarFila (car elemento) ( limpiarNils (eliminarDiag elemento tab)))))
            (cons (car tab) (elim elemento (cdr tab) ) )
        )
    )
)

(defun elimFilColDiagTodosLosPares (listaPares tab)
    (if  (null listaPares)
        tab
        (elimFilColDiagTodosLosPares (cdr listaPares) (elim (car listaPares) tab))
    )
)

(defun buscarLong2Mas (L)
    (if (null L)
        nil
        ( if (>= (length (car L)) 2)
            (list (car L))
            (buscarLong2Mas (cdr L))
        )
    )
)

(defun crearFila (maxCol &optional (fila '1) (minCol '1))
    (if (> minCol maxCol)
        nil
        (cons (list fila minCol) (crearFila maxCol fila (+ minCol '1) ))
    )
)

(defun tablero (n &optional (fila '1) (columna '1))
    (if (> fila n)
        nil
        (cons (crearFila N fila) (tablero N (+ fila '1) (+ columna '1 ) ) )
    )
)

(defun ReinasAux (n PosReinas)
    (Reinas n (cons (cdar PosReinas) (cdr PosReinas)) 
        (elimFilColDiagTodosLosPares 
            (cons (cadar PosReinas) (mapcar 'car (cdr PosReinas)))
            (tablero n (length (cons (cdar PosReinas) (cdr PosReinas)) ) )
        )
    )
)

(defun Reinas (n &optional (PosReinas (list (car (tablero n))) ) (tab (elim ( caar PosReinas) (tablero n)) ) )
    (if (eq (length PosReinas) n )
        (reverse (mapcar 'car PosReinas))
        (if (< (length PosReinas) (caaar PosReinas))  ;me pase
            (ReinasAux n  (buscarlong2omas PosReinas))   
            (if (null tab) 
                (ReinasAux n (buscarlong2omas PosReinas))  
                (Reinas n (cons (car tab) PosReinas) (elim (list (caar tab)) tab))
            ) 
        ;(if (< (+ (length PosReinas) (length tab)) n)
        ;    (ReinasAux n (buscarLong2Mas PosReinas))
        ;    (Reinas n (cons (car tab) PosReinas) (elim (caar tab) tab))
        )
    )  
)

;(defun reinas (n &optional (posreinas (list(car (tablero n)))) (tab (elimtodoslospares (list(caar posreinas)) (tablero n)))  )
;    (if (eq (length posreinas) n)
;        (mapcar 'car posreinas)  
;        (if (< (length posreinas) (caaar posreinas))  ;me pase
;            (reinasaux n  (buscarlong2omas posreinas))    
;            (if (null tab) 
;                (reinasaux n (buscarlong2omas posreinas))  
;                (reinas n (cons (car tab) posreinas) (elimtodoslospares (list (caar tab)) tab))
;            )
;        )
;    )
;)

;(tablero 4)
;(tablero 2 2)
;(tablero 4 3)
;(eliminarColumna '2 (tablero 3))
;(eliminarFila '1 (tablero 3))
;(eliminarFila (car '(2 2)) (eliminarColumna (cadr '(1 2)) (tablero 3)))
;(eliminarDiag '(2 2) (tablero 3))
;(elim '(2 2) (tablero 4))
;(list ( caar (list (car (tablero 4)))))
;(elimFilColDiagTodosLosPares (list ( caar (list (car (tablero 4))))) (tablero 4))
;(elimFilColDiagTodosLosPares '((2 2) ) (tablero 4))
;(elimFilColDiagTodosLosPares '((2 2) (3 4)) (tablero 4))
;(elim '(3 4) '(((1 1) (1 3) (1 4)) ((3 4)) ((4 1) (4 3))) )
;(eliminarDiagSubFun 3 4 '(((4 1) (4 3))) )
;(limpiarNils (eliminarColumna (cadr '(3 4)) (eliminarFila (car '(3 4)) (limpiarNils (eliminarDiag '(3 4) '(((3 4)) ((4 1) (4 3))))))))
;(eliminarColumna (cadr '(3 4)) (eliminarFila (car '(3 4)) (limpiarNils (eliminarDiag '(3 4) '(((3 4)) ((4 1) (4 3)))))))
;(eliminarFila (car '(3 4)) (limpiarNils (eliminarDiag '(3 4) '(((3 4)) ((4 1) (4 3))))))
;(limpiarNils (eliminarDiag '(3 4) '(((3 4)) ((4 1) (4 3)))))
;(setq tab (elimColDiagTodosLosPares (list ( caar (list (car (tablero 4))))) (cdr (tablero 4))))
;(elim (caar tab) tab)
(Reinas 5)
